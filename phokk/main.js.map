{
  "version": 3,
  "sources": ["../src/main.ts", "../src/debugDraw.js", "../src/box2DUtils.ts"],
  "sourcesContent": ["import Box2DFactory from 'box2d-wasm';\r\nimport { makeDebugDraw } from './debugDraw.js'\r\nimport { initBox2DUtils, makeBoxAt, cloneVec2, makeFoodAt } from './box2DUtils'\r\n\r\nBox2DFactory().then(box2D => {\r\n    initBox2DUtils(box2D)\r\n\r\n    const { b2BodyDef, b2_dynamicBody, b2_kinematicBody, b2CircleShape, b2PolygonShape, b2Vec2, b2World } = box2D;\r\n\r\n    // in metres per second squared\r\n    const gravity = new b2Vec2(0, 10);\r\n    const world = new b2World(gravity);\r\n\r\n    const canvas = document.getElementById(\"demo-canvas\") as HTMLCanvasElement;\r\n    // canvas.addEventListener('contextmenu', e => e.preventDefault())\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    const pixelsPerMeter = 160;\r\n    const cameraOffsetMetres = {\r\n        x: 0,\r\n        y: 0\r\n    };\r\n\r\n    const debugDraw = makeDebugDraw(ctx, pixelsPerMeter, box2D);\r\n    world.SetDebugDraw(debugDraw);\r\n\r\n    const ballShape = new b2CircleShape();\r\n    ballShape.set_m_radius(0.1)\r\n    const ballBodyDef = new b2BodyDef();\r\n    ballBodyDef.set_type(b2_dynamicBody);\r\n    const ball = world.CreateBody(ballBodyDef);\r\n    const ballFixture = ball.CreateFixture(ballShape, 1);\r\n    ballFixture.SetRestitution(0.6)\r\n    ball.SetTransform(new b2Vec2(2, 2), 1);\r\n    ball.SetBullet(true);\r\n\r\n    const pendulumShape = new b2CircleShape();\r\n    pendulumShape.set_m_radius(0.05)\r\n    const pendulumBodyDef = new b2BodyDef();\r\n    pendulumBodyDef.set_type(b2_kinematicBody);\r\n    const pendulum = world.CreateBody(pendulumBodyDef);\r\n    const pendulumFixture = pendulum.CreateFixture(pendulumShape, 1);\r\n    const pendulumFilterData = new box2D.b2Filter();\r\n    pendulumFilterData.set_categoryBits(0);\r\n    pendulumFixture.SetFilterData(pendulumFilterData);\r\n    pendulum.SetTransform(new b2Vec2(2, 1.5), 1);\r\n\r\n    const floor = makeBoxAt(world, 2, 4, 2, 0.1, 0)\r\n    const ceiling = makeBoxAt(world, 2, 0, 2, 0.1, 0)\r\n    const leftWall = makeBoxAt(world, 0, 2, 0.1, 1.9, 0)\r\n    const rightWall = makeBoxAt(world, 4, 2, 0.1, 1.9, 0)\r\n\r\n    const food = makeFoodAt(world, 0, 0)\r\n    let foodHit = false;\r\n    const placeFood = () => {\r\n        food.SetTransform(new b2Vec2(0.4 + 3.2 * Math.random(), 0.4 + 3.2 * Math.random()),0);\r\n    }\r\n    placeFood();\r\n    \r\n\r\n\r\n    // calculate no more than a 60th of a second during one world.Step() call\r\n    const maxTimeStepMs = 1 / 60 * 1000;\r\n    const velocityIterations = 2;\r\n    const positionIterations = 2;\r\n\r\n    /**\r\n     * Advances the world's physics by the requested number of milliseconds\r\n     * @param {number} deltaMs\r\n     */\r\n    const step = (deltaMs) => {\r\n        const clampedDeltaMs = Math.min(deltaMs, maxTimeStepMs);\r\n        world.Step(clampedDeltaMs / 1000, velocityIterations, positionIterations);\r\n    };\r\n\r\n\r\n    const drawCanvas = () => {\r\n        ctx.closePath()\r\n\r\n        ctx.fillStyle = 'rgb(0,0,0)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.save();\r\n        ctx.scale(pixelsPerMeter, pixelsPerMeter);\r\n        const { x, y } = cameraOffsetMetres;\r\n        ctx.translate(x, y);\r\n        ctx.lineWidth = 2 / pixelsPerMeter;\r\n        ctx.fillStyle = 'white';\r\n        ctx.strokeStyle = 'white';\r\n\r\n        \r\n        {\r\n            const {x,y} = ball.GetPosition();\r\n            ctx.beginPath()\r\n            ctx.strokeRect(0.1,0.1,3.8,3.8)\r\n            ctx.arc(x,y,ballShape.m_radius,0,Math.PI * 2);\r\n            // ctx.stroke()\r\n            ctx.fill()\r\n        }\r\n\r\n        {\r\n            const {x,y} = pendulum.GetPosition();\r\n            ctx.beginPath()\r\n            // ctx.fillStyle = 'white';\r\n            // ctx.strokeStyle = 'white';\r\n            ctx.arc(x,y,pendulumShape.m_radius,0,Math.PI * 2);\r\n            ctx.stroke()\r\n            // ctx.fill()\r\n        }\r\n\r\n        {\r\n            const {x,y} = food.GetPosition();\r\n            ctx.beginPath()\r\n            // ctx.fillStyle = 'white';\r\n            // ctx.strokeStyle = 'white';\r\n            ctx.setLineDash([0.024,0.024])\r\n            ctx.arc(x,y,0.1,0,Math.PI * 2);\r\n            ctx.stroke()\r\n            ctx.setLineDash([]);\r\n            // ctx.fill()\r\n        }\r\n\r\n        ctx.fillStyle = 'rgb(255,255,255)';\r\n        // world.DebugDraw();\r\n\r\n        ctx.restore();\r\n    };\r\n\r\n    let mouseDown = false;\r\n    document.body.addEventListener('mousedown', () => {\r\n        mouseDown = true;\r\n    });\r\n    document.body.addEventListener('mouseup', () => {\r\n        mouseDown = false;\r\n    });\r\n    document.body.addEventListener('mouseleave', () => {\r\n        mouseDown = false;\r\n    });\r\n\r\n\r\n    let time = 0;\r\n    const contactListener = new box2D.JSContactListener();\r\n    contactListener.BeginContact = (_contact:number) =>{\r\n        const contact = box2D.wrapPointer(_contact, box2D.b2Contact);\r\n        const ab = [contact.GetFixtureA().GetBody(), contact.GetFixtureB().GetBody()]\r\n        if(ab.includes(ball) && ab.includes(food)){\r\n            foodHit = true;\r\n        }\r\n    }\r\n    contactListener.PreSolve = ()=>{}\r\n    contactListener.PostSolve = ()=>{}\r\n    contactListener.EndContact = ()=>{}\r\n    world.SetContactListener(contactListener);\r\n\r\n    (function loop(prevMs) {\r\n        const nowMs = window.performance.now();\r\n        requestAnimationFrame(loop.bind(null, nowMs));\r\n        const deltaMs = nowMs - prevMs;\r\n        time += deltaMs;\r\n        \r\n        pendulum.SetTransform(new b2Vec2(Math.sin(time * 0.0015) * 1.5 + 2,1.5),0);\r\n        if(foodHit){\r\n            foodHit = false;\r\n            placeFood();\r\n        }\r\n        if (mouseDown){\r\n            let vec = cloneVec2(pendulum.GetPosition());\r\n            vec.op_sub(ball.GetPosition())\r\n            const mul = 4 - vec.Length()\r\n            const mag = deltaMs * 0.0005 + mul * 0.001;\r\n            vec.Normalize()\r\n            vec.op_mul(mag)\r\n            vec.set_y(vec.y * 1.5);\r\n            ball.ApplyLinearImpulseToCenter(vec, true)\r\n        }\r\n        step(deltaMs);\r\n        \r\n        \r\n        drawCanvas();\r\n    }(window.performance.now()));\r\n\r\n})", "/**\n * Forked from Box2D.js\n * @see https://github.com/kripken/box2d.js/blob/f75077b/helpers/embox2d-helpers.js\n * @author dmagunov + Huy Nguyen + fork contributions from Alex Birch\n * @see https://github.com/kripken/box2d.js/blob/49dddd6/helpers/embox2d-html5canvas-debugDraw.js\n * @author dmagunov + fork contributions from Alex Birch\n * @license Zlib https://opensource.org/licenses/Zlib\n * License evidence: https://github.com/kripken/box2d.js/blob/master/README.markdown#box2djs\n *   \"box2d.js is zlib licensed, just like Box2D.\"\n * \n * @typedef {import('box2d-wasm')} Box2DFactory\n * @param {CanvasRenderingContext2D} ctx\n * @param {number} pixelsPerMeter\n * @param {typeof Box2D & EmscriptenModule} box2D\n */\nexport const makeDebugDraw = (ctx, pixelsPerMeter, box2D) => {\n  const {\n    b2Color,\n    b2Draw: { e_shapeBit },\n    b2Transform,\n    b2Vec2,\n    JSDraw,\n    wrapPointer\n  } = box2D;\n\n  /**\n   * to replace original C++ operator =\n   * @param {Box2D.b2Vec2} vec\n   * @returns {Box2D.b2Vec2}\n   */\n  const copyVec2 = vec =>\n    new b2Vec2(vec.get_x(), vec.get_y());\n\n  /**\n   * to replace original C++ operator *= (float) \n   * @param {Box2D.b2Vec2} vec\n   * @param {number} scale\n   * @returns {Box2D.b2Vec2}\n   */\n  const scaledVec2 = (vec, scale) =>\n    new b2Vec2(scale * vec.get_x(), scale * vec.get_y());\n    \n  /**\n   * @param {Box2D.b2Color} color\n   * @returns {string}\n   */\n  const getRgbStr = (color) => {\n    const red = (color.get_r() * 255)|0;\n    const green = (color.get_g() * 255)|0;\n    const blue = (color.get_b() * 255)|0;\n    return `${red},${green},${blue}`;\n  };\n\n  /**\n   * @param {string} rgbStr\n   * @returns {void}\n   */\n  const setCtxColor = (rgbStr) => {\n    ctx.fillStyle = `rgba(${rgbStr},0.5)`;\n    ctx.strokeStyle = `rgb(${rgbStr})`;\n  };\n\n  /**\n   * @param {Box2D.b2Vec2[]} vertices\n   * @param {boolean} fill\n   * @returns {void}\n   */\n  const drawPolygon = (vertices, fill) => {\n    ctx.beginPath();\n    let first = true;\n    for (const vertex of vertices) {\n      if (first) {\n        ctx.moveTo(vertex.get_x(), vertex.get_y());\n        first = false;\n      } else {\n        ctx.lineTo(vertex.get_x(), vertex.get_y());\n      }\n    }\n    ctx.closePath();\n    if (fill) {\n      ctx.fill();\n    }\n    ctx.stroke();\n  };\n\n  /**\n   * @param {Box2D.b2Vec2} center\n   * @param {number} radius\n   * @param {Box2D.b2Vec2} axis\n   * @param {boolean} fill\n   * @returns {void}\n   */\n  const drawCircle = (center, radius, axis, fill) => {\n    ctx.beginPath();\n    ctx.arc(center.get_x(), center.get_y(), radius, 0, 2 * Math.PI, false);\n    if (fill) {\n      ctx.fill();\n    }\n    ctx.stroke();\n    \n    if (fill) {\n      //render axis marker\n      const vertex = copyVec2(center);\n      vertex.op_add(scaledVec2(axis, radius));\n      ctx.beginPath();\n      ctx.moveTo(center.get_x(), center.get_y());\n      ctx.lineTo(vertex.get_x(), vertex.get_y());\n      ctx.stroke();\n    }\n  };\n\n  /**\n   * @param {Box2D.b2Vec2} vert1\n   * @param {Box2D.b2Vec2} vert2\n   * @returns {void}\n   */\n  const drawSegment = (vert1, vert2) => {\n    ctx.beginPath();\n    ctx.moveTo(vert1.get_x(), vert1.get_y());\n    ctx.lineTo(vert2.get_x(), vert2.get_y());\n    ctx.stroke();\n  };\n\n  /**\n   * @param {Box2D.b2Vec2} vertex\n   * @param {number} sizeMetres\n   * @returns {void}\n   */\n  const drawPoint = (vertex, sizeMetres) => {\n    const sizePixels = sizeMetres/pixelsPerMeter;\n    ctx.fillRect(\n      vertex.get_x()-sizePixels/2,\n      vertex.get_y()-sizePixels/2,\n      sizePixels,\n      sizePixels\n      );\n  };\n\n  /**\n   * @param {Box2D.b2Transform} transform\n   * @param {number} sizeMetres\n   * @returns {void}\n   */\n  const drawTransform = transform => {\n    const pos = transform.get_p();\n    const rot = transform.get_q();\n    \n    ctx.save();\n    ctx.translate(pos.get_x(), pos.get_y());\n    ctx.scale(0.5, 0.5);\n    ctx.rotate(rot.GetAngle());\n    ctx.lineWidth *= 2;\n    ctx.restore();\n  }\n\n  /** {@link Box2D.b2Vec2} is a struct of `float x, y` */\n  const sizeOfB2Vec = Float32Array.BYTES_PER_ELEMENT * 2;\n\n  /**\n   * @param {number} array_p pointer to {@link Box2D.b2Vec2}\n   * @param {number} numElements length of array\n   * @param {number} sizeOfElement size of an instance of the array element\n   * @param {typeof Box2D.b2Vec2} ctor constructor for the array element\n   * @return {Box2D.b2Vec2[]}\n   */\n  const reifyArray = (array_p, numElements, sizeOfElement, ctor) =>\n    Array(numElements)\n      .fill(undefined)\n      .map((_, index) =>\n        wrapPointer(array_p + index * sizeOfElement, ctor)\n      );\n\n  const debugDraw = Object.assign(new JSDraw(), {\n    /**\n     * @param {number} vert1_p pointer to {@link Box2D.b2Vec2}\n     * @param {number} vert2_p pointer to {@link Box2D.b2Vec2}\n     * @param {number} color_p pointer to {@link Box2D.b2Color}\n     * @returns {void}\n     */\n    DrawSegment(vert1_p, vert2_p, color_p) {\n      const color = wrapPointer(color_p, b2Color);\n      setCtxColor(getRgbStr(color));\n      const vert1 = wrapPointer(vert1_p, b2Vec2);\n      const vert2 = wrapPointer(vert2_p, b2Vec2);\n      drawSegment(vert1, vert2);\n    },\n    /**\n     * @param {number} vertices_p pointer to Array<{@link Box2D.b2Vec2}>\n     * @param {number} vertexCount\n     * @param {number} color_p pointer to {@link Box2D.b2Color}\n     * @returns {void}\n     */\n    DrawPolygon(vertices_p, vertexCount, color_p) {\n      const color = wrapPointer(color_p, b2Color);\n      setCtxColor(getRgbStr(color));\n      const vertices = reifyArray(vertices_p, vertexCount, sizeOfB2Vec, b2Vec2);\n      drawPolygon(vertices, vertexCount, false);\n    },\n    /**\n     * @param {number} vertices_p pointer to Array<{@link Box2D.b2Vec2}>\n     * @param {number} vertexCount\n     * @param {number} color_p pointer to {@link Box2D.b2Color}\n     * @returns {void}\n     */\n    DrawSolidPolygon(vertices_p, vertexCount, color_p) {\n      const color = wrapPointer(color_p, b2Color);\n      setCtxColor(getRgbStr(color));\n      const vertices = reifyArray(vertices_p, vertexCount, sizeOfB2Vec, b2Vec2);\n      drawPolygon(vertices, vertexCount, true);\n    },\n    /**\n     * @param {number} center_p pointer to {@link Box2D.b2Vec2}\n     * @param {number} radius\n     * @param {number} color_p pointer to {@link Box2D.b2Color}\n     * @returns {void}\n     */\n    DrawCircle(center_p, radius, color_p) {\n      const color = wrapPointer(color_p, b2Color);\n      setCtxColor(getRgbStr(color));\n      const center = wrapPointer(center_p, b2Vec2);\n      const dummyAxis = new b2Vec2(0,0);\n      drawCircle(center, radius, dummyAxis, false);\n    },\n    /**\n     * @param {number} center_p pointer to {@link Box2D.b2Vec2}\n     * @param {number} radius\n     * @param {number} axis_p pointer to {@link Box2D.b2Vec2}\n     * @param {number} color_p pointer to {@link Box2D.b2Color}\n     * @returns {void}\n     */\n    DrawSolidCircle(center_p, radius, axis_p, color_p) {\n      const color = wrapPointer(color_p, b2Color);\n      setCtxColor(getRgbStr(color));\n      const center = wrapPointer(center_p, b2Vec2);\n      const axis = wrapPointer(axis_p, b2Vec2);\n      drawCircle(center, radius, axis, true);\n    },\n    /**\n     * @param {number} transform_p pointer to {@link Box2D.b2Transform}\n     * @returns {void}\n     */\n    DrawTransform(transform_p) {\n      const transform = wrapPointer(transform_p, b2Transform);\n      drawTransform(transform);\n    },\n    /**\n     * @param {number} vertex_p pointer to {@link Box2D.b2Vec2}\n     * @param {number} sizeMetres\n     * @param {number} pointer to {@link Box2D.b2Color}\n     * @returns {void}\n     */\n    DrawPoint(vertex_p, sizeMetres, color_p) {\n      const color = wrapPointer(color_p, b2Color);\n      setCtxColor(getRgbStr(color));\n      const vertex = wrapPointer(vertex_p, b2Vec2);\n      drawPoint(vertex, sizeMetres);\n    }\n  });\n  debugDraw.SetFlags(e_shapeBit);\n  return debugDraw;\n};", "\r\nlet box2D: typeof Box2D & EmscriptenModule\r\n\r\nexport function initBox2DUtils(b: typeof box2D) {\r\n    box2D = b\r\n}\r\n\r\nexport function makeBoxAt(\r\n    world: Box2D.b2World,\r\n    x: number,\r\n    y: number,\r\n    w: number,\r\n    h: number,\r\n    rotation: number,\r\n    type = box2D.b2_staticBody\r\n): Box2D.b2Body {\r\n    const shape = new box2D.b2PolygonShape();\r\n    shape.SetAsBox(w, h);\r\n    const floorBodyDef = new box2D.b2BodyDef();\r\n    floorBodyDef.set_type(type);\r\n    const floorBody = world.CreateBody(floorBodyDef);\r\n    floorBody.CreateFixture(shape, 1);\r\n    floorBody.SetTransform(new box2D.b2Vec2(x, y), rotation);\r\n    floorBody.SetEnabled(true);\r\n    return floorBody\r\n}\r\n\r\nexport function makeFoodAt(\r\n    world: Box2D.b2World,\r\n    x: number,\r\n    y: number,\r\n): Box2D.b2Body {\r\n    const shape = new box2D.b2CircleShape();\r\n    shape.set_m_radius(0.1)\r\n    const bodyDef = new box2D.b2BodyDef();\r\n    // bodyDef.set_type(box2D.b2_staticBody);\r\n    const body = world.CreateBody(bodyDef);\r\n    const fixture = body.CreateFixture(shape, 1);\r\n    fixture.SetSensor(true)\r\n    body.SetTransform(new box2D.b2Vec2(x, y), 0);\r\n    return body\r\n}\r\n\r\nexport function cloneVec2(vec:Box2D.b2Vec2){\r\n    return new box2D.b2Vec2(vec.get_x(), vec.get_y())\r\n}\r\n"],
  "mappings": "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",
  "names": ["Box2DFactory", "makeDebugDraw", "ctx", "pixelsPerMeter", "box2D", "b2Color", "e_shapeBit", "b2Transform", "b2Vec2", "JSDraw", "wrapPointer", "copyVec2", "vec", "scaledVec2", "scale", "getRgbStr", "color", "red", "green", "blue", "setCtxColor", "rgbStr", "drawPolygon", "vertices", "fill", "first", "vertex", "drawCircle", "center", "radius", "axis", "drawSegment", "vert1", "vert2", "drawPoint", "sizeMetres", "sizePixels", "drawTransform", "transform", "pos", "rot", "sizeOfB2Vec", "reifyArray", "array_p", "numElements", "sizeOfElement", "ctor", "_", "index", "debugDraw", "vert1_p", "vert2_p", "color_p", "vertices_p", "vertexCount", "center_p", "dummyAxis", "axis_p", "transform_p", "vertex_p", "box2D", "initBox2DUtils", "b", "makeBoxAt", "world", "x", "y", "w", "h", "rotation", "type", "shape", "floorBodyDef", "floorBody", "makeFoodAt", "bodyDef", "body", "cloneVec2", "vec", "Box2DFactory", "box2D", "initBox2DUtils", "b2BodyDef", "b2_dynamicBody", "b2_kinematicBody", "b2CircleShape", "b2PolygonShape", "b2Vec2", "b2World", "gravity", "world", "canvas", "ctx", "pixelsPerMeter", "cameraOffsetMetres", "debugDraw", "makeDebugDraw", "ballShape", "ballBodyDef", "ball", "pendulumShape", "pendulumBodyDef", "pendulum", "pendulumFixture", "pendulumFilterData", "floor", "makeBoxAt", "ceiling", "leftWall", "rightWall", "food", "makeFoodAt", "foodHit", "placeFood", "maxTimeStepMs", "velocityIterations", "positionIterations", "step", "deltaMs", "clampedDeltaMs", "drawCanvas", "x", "y", "mouseDown", "time", "contactListener", "_contact", "contact", "ab", "loop", "prevMs", "nowMs", "vec", "cloneVec2", "mul", "mag"]
}
